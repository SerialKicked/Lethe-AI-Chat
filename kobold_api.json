{
  "components": {
    "schemas": {
      "BasicError": {
        "properties": {
          "msg": { "type": "string" },
          "type": { "type": "string" }
        },
        "required": [ "msg", "type" ],
        "type": "object"
      },
      "BasicResult": {
        "properties": { "result": { "$ref": "#/components/schemas/BasicResultInner" } },
        "required": [ "result" ],
        "type": "object"
      },
      "BasicResultInner": {
        "properties": { "result": { "type": "string" } },
        "required": [ "result" ],
        "type": "object"
      },
      "GenerationInput": {
        "properties": {
          "max_context_length": {
            "description": "Maximum number of tokens to send to the model.",
            "minimum": 1,
            "type": "integer"
          },
          "max_length": {
            "description": "Number of tokens to generate.",
            "minimum": 1,
            "type": "integer"
          },
          "prompt": {
            "description": "This is the submission.",
            "type": "string"
          },
          "rep_pen": {
            "description": "Base repetition penalty value.",
            "minimum": 1,
            "type": "number"
          },
          "rep_pen_range": {
            "description": "Repetition penalty range.",
            "minimum": 0,
            "type": "integer"
          },
          "sampler_order": {
            "description": "Sampler order to be used. If N is the length of this array, then N must be greater than or equal to 6 and the array must be a permutation of the first N non-negative integers.",
            "items": { "type": "integer" },
            "minItems": 6,
            "type": "array"
          },
          "sampler_seed": {
            "description": "RNG seed to use for sampling. If not specified, the global RNG will be used.",
            "maximum": 999999,
            "minimum": 1,
            "type": "integer"
          },
          "stop_sequence": {
            "description": "An array of string sequences where the API will stop generating further tokens. The returned text WILL contain the stop sequence.",
            "items": { "type": "string" },
            "type": "array"
          },
          "temperature": {
            "description": "Temperature value.",
            "minimum": 0,
            "type": "number"
          },
          "tfs": {
            "description": "Tail free sampling value.",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "top_a": {
            "description": "Top-a sampling value.",
            "minimum": 0,
            "type": "number"
          },
          "top_k": {
            "description": "Top-k sampling value.",
            "minimum": 0,
            "type": "integer"
          },
          "top_p": {
            "description": "Top-p sampling value.",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "min_p": {
            "description": "Min-p sampling value.",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "typical": {
            "description": "Typical sampling value.",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "use_default_badwordsids": {
            "default": false,
            "description": "If true, prevents the EOS token from being generated (Ban EOS).",
            "type": "boolean"
          },
          "dynatemp_range": {
            "default": 0,
            "description": "If greater than 0, uses dynamic temperature. Dynamic temperature range will be between Temp+Range and Temp-Range. If less or equal to 0 , uses static temperature.",
            "minimum": 0,
            "type": "number"
          },
          "smoothing_factor": {
            "default": 0,
            "description": "Modifies temperature behavior. If greater than 0 uses smoothing factor.",
            "minimum": 0,
            "type": "number"
          },
          "dynatemp_exponent": {
            "default": 1,
            "description": "Exponent used in dynatemp.",
            "type": "number"
          },
          "mirostat": {
            "description": "KoboldCpp ONLY. Sets the mirostat mode, 0=disabled, 1=mirostat_v1, 2=mirostat_v2",
            "minimum": 0,
            "maximum": 2,
            "type": "number"
          },
          "mirostat_tau": {
            "description": "KoboldCpp ONLY. Mirostat tau value.",
            "minimum": 0,
            "type": "number"
          },
          "mirostat_eta": {
            "description": "KoboldCpp ONLY. Mirostat eta value.",
            "minimum": 0,
            "type": "number"
          },
          "genkey": {
            "description": "KoboldCpp ONLY. A unique genkey set by the user. When checking a polled-streaming request, use this key to be able to fetch pending text even if multiuser is enabled.",
            "type": "string"
          },
          "grammar": {
            "description": "KoboldCpp ONLY. A string containing the GBNF grammar to use.",
            "type": "string"
          },
          "grammar_retain_state": {
            "default": false,
            "description": "KoboldCpp ONLY. If true, retains the previous generation's grammar state, otherwise it is reset on new generation.",
            "type": "boolean"
          },
          "memory": {
            "description": "KoboldCpp ONLY. If set, forcefully appends this string to the beginning of any submitted prompt text. If resulting context exceeds the limit, forcefully overwrites text from the beginning of the main prompt until it can fit. Useful to guarantee full memory insertion even when you cannot determine exact token count.",
            "type": "string"
          },
          "images": {
            "description": "KoboldCpp ONLY. If set, takes an array of base64 encoded strings, each one representing an image to be processed.",
            "type": "array"
          },
          "trim_stop": {
            "default": false,
            "description": "KoboldCpp ONLY. If true, also removes detected stop_sequences from the output and truncates all text after them.",
            "type": "boolean"
          },
          "render_special": {
            "default": false,
            "description": "KoboldCpp ONLY. If true, prints special tokens as text for GGUF models",
            "type": "boolean"
          },
          "bypass_eos": {
            "default": false,
            "description": "KoboldCpp ONLY. If true, allows EOS token to be generated, but does not stop generation. Not recommended unless you know what you are doing.",
            "type": "boolean"
          },
          "banned_tokens": {
            "description": "An array of string sequences to remove from model vocab. All matching tokens with matching substrings are removed.",
            "items": { "type": "string" },
            "type": "array"
          },
          "logit_bias": {
            "default": {},
            "description": "KoboldCpp ONLY. An dictionary of key-value pairs, which indicate the token IDs (int) and logit bias (float) to apply for that token. Up to 16 value can be provided.",
            "type": "object",
            "example": {
              "2": -20,
              "145": -1.4,
              "3105": 3.2
            }
          },
          "dry_multiplier": {
            "description": "KoboldCpp ONLY. DRY multiplier value, 0 to disable.",
            "minimum": 0,
            "type": "number"
          },
          "dry_base": {
            "description": "KoboldCpp ONLY. DRY base value.",
            "minimum": 0,
            "type": "number"
          },
          "dry_allowed_length": {
            "description": "KoboldCpp ONLY. DRY allowed length value.",
            "minimum": 0,
            "type": "number"
          },
          "dry_sequence_breakers": {
            "description": "An array of string sequence breakers for DRY.",
            "items": { "type": "string" },
            "type": "array"
          },
          "xtc_threshold": {
            "description": "KoboldCpp ONLY. XTC threshold.",
            "minimum": 0,
            "type": "number"
          },
          "xtc_probability": {
            "description": "KoboldCpp ONLY. XTC probability. Set to above 0 to enable XTC.",
            "minimum": 0,
            "type": "number"
          }
        },
        "required": [ "prompt" ],
        "type": "object"
      },
      "GenerationOutput": {
        "properties": {
          "results": {
            "description": "Array of generated outputs.",
            "items": { "$ref": "#/components/schemas/GenerationResult" },
            "type": "array"
          }
        },
        "required": [ "results" ],
        "type": "object"
      },
      "GenerationResult": {
        "properties": {
          "text": {
            "description": "Generated output as plain text.",
            "type": "string"
          }
        },
        "required": [ "text" ],
        "type": "object"
      },
      "MaxContextLengthSetting": {
        "properties": {
          "value": {
            "minimum": 8,
            "type": "integer"
          }
        },
        "required": [ "value" ],
        "type": "object"
      },
      "MaxLengthSetting": {
        "properties": {
          "value": {
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [ "value" ],
        "type": "object"
      },
      "ServerBusyError": {
        "properties": { "detail": { "$ref": "#/components/schemas/BasicError" } },
        "required": [ "detail" ],
        "type": "object"
      },
      "ValueResult": {
        "properties": { "value": { "type": "integer" } },
        "required": [ "value" ],
        "type": "object"
      },
      "KcppVersion": {
        "properties": {
          "result": { "type": "string" },
          "version": { "type": "string" }
        },
        "required": [ "version" ],
        "type": "object"
      },
      "KcppPerf": {
        "properties": {
          "last_process": {
            "type": "number",
            "description": "Last processing time in seconds."
          },
          "last_eval": {
            "type": "number",
            "description": "Last evaluation time in seconds."
          },
          "last_token_count": {
            "type": "integer",
            "description": "Last token count."
          },
          "last_seed": {
            "type": "integer",
            "description": "Last generation seed used."
          },
          "total_gens": {
            "type": "integer",
            "description": "Total requests generated since startup."
          },
          "stop_reason": {
            "type": "integer",
            "description": "Reason the generation stopped. INVALID=-1, OUT_OF_TOKENS=0, EOS_TOKEN_HIT=1, CUSTOM_STOPPER=2"
          },
          "queue": {
            "type": "integer",
            "description": "Length of generation queue."
          },
          "idle": {
            "type": "integer",
            "description": "Status of backend, busy or idle."
          },
          "hordeexitcounter": {
            "type": "integer",
            "description": "Status of embedded horde worker. If it's too high, may have crashed."
          },
          "uptime": {
            "type": "integer",
            "description": "Seconds that the server has been running for."
          }
        },
        "required": [ "version" ],
        "type": "object"
      }
    }
  },
  "info": {
    "title": "KoboldCpp API",
    "description": "For swagger.json, click here.",
    "version": "1.61"
  },
  "openapi": "3.0.3",
  "paths": {
    "/api/v1/config/max_context_length": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": { "value": 2048 },
                "schema": { "$ref": "#/components/schemas/MaxContextLengthSetting" }
              }
            },
            "description": "Successful request"
          }
        },
        "summary": "Retrieve the current max context length setting value that horde sees",
        "tags": [ "api/v1" ]
      }
    },
    "/api/v1/config/max_length": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": { "value": 80 },
                "schema": { "$ref": "#/components/schemas/MaxLengthSetting" }
              }
            },
            "description": "Successful request"
          }
        },
        "summary": "Retrieve the current max length (amount to generate) setting value",
        "tags": [ "api/v1" ]
      }
    },
    "/api/v1/generate": {
      "post": {
        "description": "Generates text given a prompt and generation settings.\n\nUnspecified values are set to defaults.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "max_context_length": 2048,
                "max_length": 100,
                "prompt": "Niko the kobold stalked carefully down the alley, his small scaly figure obscured by a dusky cloak that fluttered lightly in the cold winter breeze.",
                "quiet": false,
                "rep_pen": 1.1,
                "rep_pen_range": 256,
                "rep_pen_slope": 1,
                "temperature": 0.5,
                "tfs": 1,
                "top_a": 0,
                "top_k": 100,
                "top_p": 0.9,
                "typical": 1
              },
              "schema": { "$ref": "#/components/schemas/GenerationInput" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": { "results": [ { "text": " Holding up his tail to keep it from dragging in the dirty snow that covered the cobblestone, he waited patiently for the butcher to turn his attention from his stall so that he could pilfer his next meal: a tender-looking chicken." } ] },
                "schema": { "$ref": "#/components/schemas/GenerationOutput" }
              }
            },
            "description": "Successful request"
          },
          "503": {
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "msg": "Server is busy; please try again later.",
                    "type": "service_unavailable"
                  }
                },
                "schema": { "$ref": "#/components/schemas/ServerBusyError" }
              }
            },
            "description": "Server is busy"
          }
        },
        "summary": "Generate text with a specified prompt",
        "tags": [ "api/v1" ]
      }
    },
    "/api/v1/info/version": {
      "get": {
        "description": "Returns the matching *KoboldAI* (United) version of the API that you are currently using. This is not the same as the KoboldCpp API version - this is used to feature match against KoboldAI United.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": { "result": "1.2.5" },
                "schema": { "$ref": "#/components/schemas/BasicResult" }
              }
            },
            "description": "Successful request"
          }
        },
        "summary": "Current KoboldAI United API version",
        "tags": [ "api/v1" ]
      }
    },
    "/api/v1/model": {
      "get": {
        "description": "Gets the current model display name.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": { "result": "koboldcpp/airoboros-l2-7b-2.2" },
                "schema": { "$ref": "#/components/schemas/BasicResult" }
              }
            },
            "description": "Successful request"
          }
        },
        "summary": "Retrieve the current model string.",
        "tags": [ "api/v1" ]
      }
    },
    "/api/extra/true_max_context_length": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": { "value": 2048 },
                "schema": { "$ref": "#/components/schemas/MaxContextLengthSetting" }
              }
            },
            "description": "Successful request"
          }
        },
        "summary": "Retrieve the actual max context length setting value set from the launcher",
        "description": "Retrieve the actual max context length setting value set from the launcher",
        "tags": [ "api/extra" ]
      }
    },
    "/api/extra/version": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "result": "KoboldCpp",
                  "version": "1.61",
                  "protected": false,
                  "txt2img": false,
                  "vision": false
                },
                "schema": { "$ref": "#/components/schemas/KcppVersion" }
              }
            },
            "description": "Successful request"
          }
        },
        "description": "Retrieve the KoboldCpp backend version",
        "summary": "Retrieve the KoboldCpp backend version",
        "tags": [ "api/extra" ]
      }
    },
    "/api/extra/preloadstory": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "prompt": "Hello world",
                  "memory": "Some text",
                  "authorsnote": "",
                  "actions": []
                }
              }
            },
            "description": "Successful request"
          }
        },
        "description": "Retrieves the KoboldCpp preloaded story, --preloadstory configures a prepared story json save file to be hosted on the server, which frontends (such as KoboldAI Lite) can access over the API.",
        "summary": "Retrieves the KoboldCpp preloaded story",
        "tags": [ "api/extra" ]
      }
    },
    "/api/extra/perf": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "last_process": 5,
                  "last_eval": 7,
                  "last_token_count": 80,
                  "stop_reason": 1,
                  "queue": 0,
                  "total_gens": 3,
                  "idle": 1
                },
                "schema": { "$ref": "#/components/schemas/KcppPerf" }
              }
            },
            "description": "Successful request"
          }
        },
        "description": "Retrieve the KoboldCpp recent performance information",
        "summary": "Retrieve the KoboldCpp recent performance information",
        "tags": [ "api/extra" ]
      }
    },
    "/api/extra/generate/stream": {
      "post": {
        "description": "Generates text given a prompt and generation settings, with SSE streaming.\n\nUnspecified values are set to defaults.\n\nSSE streaming establishes a persistent connection, returning ongoing process in the form of message events.\n\n``` \nevent: message\ndata: {data}\n\n```",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "prompt": "Niko the kobold stalked carefully down the alley, his small scaly figure obscured by a dusky cloak that fluttered lightly in the cold winter breeze.",
                "temperature": 0.5,
                "top_p": 0.9
              },
              "schema": { "$ref": "#/components/schemas/GenerationInput" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": { "results": [ { "text": " Holding up his tail to keep it from dragging in the dirty snow that covered the cobblestone, he waited patiently for the butcher to turn his attention from his stall so that he could pilfer his next meal: a tender-looking chicken." } ] },
                "schema": { "$ref": "#/components/schemas/GenerationOutput" }
              }
            },
            "description": "Successful request"
          },
          "503": {
            "content": {
              "application/json": {
                "example": {
                  "detail": {
                    "msg": "Server is busy; please try again later.",
                    "type": "service_unavailable"
                  }
                },
                "schema": { "$ref": "#/components/schemas/ServerBusyError" }
              }
            },
            "description": "Server is busy"
          }
        },
        "summary": "Generate text with a specified prompt. SSE streamed results.",
        "tags": [ "api/extra" ]
      }
    },
    "/api/extra/generate/check": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": { "results": [ { "text": ", my name is Nik" } ] },
                "schema": { "$ref": "#/components/schemas/GenerationOutput" }
              }
            },
            "description": "Successful request"
          }
        },
        "summary": "Poll the incomplete results of the currently ongoing text generation.",
        "description": "Poll the incomplete results of the currently ongoing text generation. Will not work when multiple requests are in queue.",
        "tags": [ "api/extra" ]
      },
      "post": {
        "description": "Poll the incomplete results of the currently ongoing text generation. A unique genkey previously submitted allows polling even in multiuser mode.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": { "genkey": "KCPP2342" },
              "schema": {
                "properties": {
                  "genkey": {
                    "type": "string",
                    "description": "A unique key used to identify this generation while it is in progress."
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": { "results": [ { "text": ", my name is Nik" } ] },
                "schema": { "$ref": "#/components/schemas/GenerationOutput" }
              }
            },
            "description": "Successful request"
          }
        },
        "summary": "Poll the incomplete results of the currently ongoing text generation. Supports multiuser mode.",
        "tags": [ "api/extra" ]
      }
    },
    "/api/extra/tokencount": {
      "post": {
        "description": "Counts the number of tokens in a string.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": { "prompt": "Hello, my name is Niko." },
              "schema": {
                "properties": {
                  "prompt": {
                    "type": "string",
                    "description": "The string to be tokenized."
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "value": 9,
                  "ids": [ 1, 22557, 28725, 586, 1141, 349, 11952, 28709, 28723 ]
                },
                "schema": { "$ref": "#/components/schemas/ValueResult" }
              }
            },
            "description": "Successful request"
          }
        },
        "summary": "Counts the number of tokens in a string.",
        "tags": [ "api/extra" ]
      }
    },
    "/api/extra/abort": {
      "post": {
        "description": "Aborts the currently ongoing text generation. Does not work when multiple requests are in queue.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": { "genkey": "KCPP2342" },
              "schema": {
                "properties": {
                  "genkey": {
                    "type": "string",
                    "description": "A unique key used to identify this generation while it is in progress."
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": { "success": true },
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Whether the abort was successful."
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          }
        },
        "summary": "Aborts the currently ongoing text generation.",
        "tags": [ "api/extra" ]
      }
    },
    "/api/extra/transcribe": {
      "post": {
        "description": "Uses Whisper to perform a Speech-To-Text transcription.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "prompt": "",
                "audio_data": "base64_wav_data"
              },
              "schema": {
                "properties": {
                  "audio_data": {
                    "type": "string",
                    "description": "Base64 respresentation of a 16-bit 16kHz wave file to be transcribed to text."
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": { "text": "Hello world" },
                "schema": { "$ref": "#/components/schemas/ValueResult" }
              }
            },
            "description": "Successful request"
          }
        },
        "summary": "Uses Whisper to perform a Speech-To-Text transcription.",
        "tags": [ "api/extra" ]
      }
    },
    "/sdapi/v1/sd-models": {
      "get": {
        "description": "Gets a list of image generation models. For koboldcpp, only one model will be returned. If no model is loaded, the list is empty.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": [
                  {
                    "title": "stable_diffusion",
                    "model_name": "stable_diffusion",
                    "hash": "8888888888",
                    "sha256": "8888888888888888888888888888888888888888888888888888888888888888",
                    "filename": "path_to_safetensors_model_file",
                    "config": null
                  }
                ]
              }
            },
            "description": "Successful request"
          }
        },
        "summary": "Gets a list of image generation models",
        "tags": [ "sdapi/v1" ]
      }
    },
    "/sdapi/v1/options": {
      "get": {
        "description": "Gets configuration info for image generation, used to get loaded model name in A1111.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "samples_format": "png",
                  "sd_model_checkpoint": "stable_diffusion"
                }
              }
            },
            "description": "Successful request"
          }
        },
        "summary": "Gets configuration info for image generation",
        "tags": [ "sdapi/v1" ]
      }
    },
    "/sdapi/v1/samplers": {
      "get": {
        "description": "Gets a list of supported samplers.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": [
                  {
                    "name": "Euler a",
                    "aliases": [ "k_euler_a", "k_euler_ancestral" ],
                    "options": {}
                  },
                  {
                    "name": "Euler",
                    "aliases": [ "k_euler" ],
                    "options": {}
                  },
                  {
                    "name": "Heun",
                    "aliases": [ "k_heun" ],
                    "options": {}
                  },
                  {
                    "name": "DPM2",
                    "aliases": [ "k_dpm_2" ],
                    "options": {}
                  },
                  {
                    "name": "DPM++ 2M",
                    "aliases": [ "k_dpmpp_2m" ],
                    "options": {}
                  }
                ]
              }
            },
            "description": "Successful request"
          }
        },
        "summary": "Gets a list of supported samplers",
        "tags": [ "sdapi/v1" ]
      }
    },
    "/sdapi/v1/txt2img": {
      "post": {
        "description": "Generates an image from a text prompt, and returns a base64 encoded png.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "prompt": "picture of a kobold, high quality HD render",
                "negative_prompt": "ugly, deformed, censored",
                "cfg_scale": 5,
                "steps": 20,
                "width": 512,
                "height": 512,
                "seed": -1,
                "sampler_name": "Euler a"
              },
              "schema": {
                "properties": {
                  "prompt": { "type": "string" },
                  "negative_prompt": { "type": "string" },
                  "cfg_scale": { "type": "number" },
                  "steps": { "type": "number" },
                  "width": { "type": "number" },
                  "height": { "type": "number" },
                  "seed": { "type": "number" },
                  "sampler_name": { "type": "string" }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "images": [ "base64_image_data" ],
                  "parameters": {},
                  "info": ""
                },
                "schema": {
                  "properties": {
                    "images": {
                      "type": "string",
                      "description": "A base64 string containing the encoded PNG of the generated image."
                    },
                    "parameters": {
                      "type": "object",
                      "description": "Not used. Will be empty."
                    },
                    "info": {
                      "type": "string",
                      "description": "Not used. Will be empty."
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          }
        },
        "summary": "Generates an image from a text prompt",
        "tags": [ "sdapi/v1" ]
      }
    },
    "/sdapi/v1/img2img": {
      "post": {
        "description": "Transforms an existing image into a new image, guided by a text prompt, and returns a base64 encoded png.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "prompt": "picture of a kobold, high quality HD render",
                "negative_prompt": "ugly, deformed, censored",
                "cfg_scale": 5,
                "steps": 20,
                "width": 512,
                "height": 512,
                "seed": -1,
                "sampler_name": "Euler a",
                "denoising_strength": 0.6,
                "init_images": [ "base64_image_data" ]
              },
              "schema": {
                "properties": {
                  "prompt": { "type": "string" },
                  "negative_prompt": { "type": "string" },
                  "cfg_scale": { "type": "number" },
                  "steps": { "type": "number" },
                  "width": { "type": "number" },
                  "height": { "type": "number" },
                  "seed": { "type": "number" },
                  "sampler_name": { "type": "string" },
                  "denoising_strength": { "type": "number" },
                  "init_images": { "type": "array" }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "images": [ "base64_image_data" ],
                  "parameters": {},
                  "info": ""
                },
                "schema": {
                  "properties": {
                    "images": {
                      "type": "string",
                      "description": "A base64 string containing the encoded PNG of the generated image."
                    },
                    "parameters": {
                      "type": "object",
                      "description": "Not used. Will be empty."
                    },
                    "info": {
                      "type": "string",
                      "description": "Not used. Will be empty."
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          }
        },
        "summary": "Transforms an existing image into a new image",
        "tags": [ "sdapi/v1" ]
      }
    },
    "/sdapi/v1/interrogate": {
      "post": {
        "description": "Generates a short text caption describing an image.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "image": "base64_image_data",
                "model": "clip"
              },
              "schema": {
                "properties": {
                  "image": {
                    "type": "string",
                    "description": "A base64 string containing the encoded PNG of the image."
                  },
                  "model": {
                    "type": "string",
                    "description": "Not used."
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": { "caption": "A picture of a white cottage with a flagpole." },
                "schema": {
                  "properties": {
                    "caption": {
                      "type": "string",
                      "description": "A short text description of the image."
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          }
        },
        "summary": "Generates a short text caption describing an image",
        "tags": [ "sdapi/v1" ]
      }
    },
    "/v1/completions": {
      "post": {
        "summary": "Generates text continuations given a prompt. Please refer to OpenAI documentation",
        "description": "Generates text continuations given a prompt.\n\nThis is an OpenAI compatibility endpoint.\n\n Please refer to OpenAI documentation at [https://platform.openai.com/docs/api-reference/completions](https://platform.openai.com/docs/api-reference/completions)",
        "tags": [ "v1" ],
        "responses": { "default": { "description": "" } }
      }
    },
    "/v1/chat/completions": {
      "post": {
        "summary": "Generates a response from a list of messages. Please refer to OpenAI documentation",
        "description": "Given a list of messages comprising a conversation, the model will return a response.\n\n This is an OpenAI compatibility endpoint.\n\n Please refer to OpenAI documentation at [https://platform.openai.com/docs/api-reference/chat](https://platform.openai.com/docs/api-reference/chat)",
        "tags": [ "v1" ],
        "responses": { "default": { "description": "" } }
      }
    },
    "/v1/models": {
      "get": {
        "summary": "List and describe the various models available in the API. Please refer to OpenAI documentation",
        "description": "List and describe the various models available in the API.\n\n This is an OpenAI compatibility endpoint.\n\n Please refer to OpenAI documentation at [https://platform.openai.com/docs/api-reference/models](https://platform.openai.com/docs/api-reference/models)",
        "tags": [ "v1" ],
        "responses": { "default": { "description": "" } }
      }
    },
    "/v1/audio/transcriptions": {
      "post": {
        "summary": "Transcribes a wav file with speech to text using loaded Whisper model. Please refer to OpenAI documentation",
        "description": "Transcribes a wav file with speech to text using loaded Whisper model.\n\n This is an OpenAI compatibility endpoint.\n\n Please refer to OpenAI documentation at [https://platform.openai.com/docs/api-reference/audio/createTranscription](https://platform.openai.com/docs/api-reference/audio/createTranscription)",
        "tags": [ "v1" ],
        "responses": { "default": { "description": "" } }
      }
    }
  },
  "servers": [ { "url": "/" } ],
  "tags": [
    {
      "description": "KoboldAI United compatible API core endpoints",
      "name": "api/v1"
    },
    {
      "description": "Extended API unique to KoboldCpp",
      "name": "api/extra"
    },
    {
      "description": "Image Generation API (A1111 compatible)",
      "name": "sdapi/v1"
    },
    {
      "description": "OpenAI compatible textgen API (not recommended)",
      "name": "v1"
    }
  ]
}